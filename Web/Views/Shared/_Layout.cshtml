<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>@ViewData["Title"]</title>

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@@picocss/pico@@2/css/pico.min.css">
</head>
<body hx-boost="true">

<main class="container">
    @RenderBody()
</main>
@await RenderSectionAsync("Scripts", false)
</body>
<script src="https://unpkg.com/htmx.org@1.9.10"></script>
<script type="module">
    window.coerceToArrayBuffer = window.coerceToArrayBuffer || function (thing, name) {
        if (typeof thing === "string") {
            // base64url to base64
            thing = thing.replace(/-/g, "+").replace(/_/g, "/");
    
            // base64 to Uint8Array
            var str = window.atob(thing);
            var bytes = new Uint8Array(str.length);
            for (var i = 0; i < str.length; i++) {
                bytes[i] = str.charCodeAt(i);
            }
            thing = bytes;
        }
    
        // Array to Uint8Array
        if (Array.isArray(thing)) {
            thing = new Uint8Array(thing);
        }
    
        // Uint8Array to ArrayBuffer
        if (thing instanceof Uint8Array) {
            thing = thing.buffer;
        }
    
        // error if none of the above worked
        if (!(thing instanceof ArrayBuffer)) {
            throw new TypeError("could not coerce '" + name + "' to ArrayBuffer");
        }
    
        return thing;
    };
    
    
    window.coerceToBase64Url = window.coerceToBase64Url || function (thing) {
        // Array or ArrayBuffer to Uint8Array
        if (Array.isArray(thing)) {
            thing = Uint8Array.from(thing);
        }
    
        if (thing instanceof ArrayBuffer) {
            thing = new Uint8Array(thing);
        }
    
        // Uint8Array to base64
        if (thing instanceof Uint8Array) {
            var str = "";
            var len = thing.byteLength;
    
            for (var i = 0; i < len; i++) {
                str += String.fromCharCode(thing[i]);
            }
            thing = window.btoa(str);
        }
    
        if (typeof thing !== "string") {
            throw new Error("could not coerce to string");
        }
    
        // base64 to base64url
        // NOTE: "=" at the end of challenge is optional, strip it off here
        thing = thing.replace(/\+/g, "-").replace(/\//g, "_").replace(/=*$/g, "");
    
        return thing;
    };
    
    
    
    function detectFIDOSupport() {
        if (window.PublicKeyCredential === undefined ||
            typeof window.PublicKeyCredential !== "function") {
            //$('#register-button').attr("disabled", true);
            //$('#login-button').attr("disabled", true);
            var el = document.getElementById("notSupportedWarning");
            if (el) {
                el.style.display = 'block';
            }
            
        }
    }
    
    function value(selector) {
        var el = document.querySelector(selector);
        if (el.type === "checkbox") {
            return el.checked;
        }
        return el.value;
    }
</script>
</html>
